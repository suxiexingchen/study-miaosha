<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.platform,com.dkt">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--HandlerMapping 无需配置，springmvc可以默认启动-->
    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <bean id="annotationMethodHandlerAdapter"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/json; charset=UTF-8</value>
                            <value>application/x-www-form-urlencoded; charset=UTF-8</value>
                            <value>application/octet-stream</value>
                            <value>application/x-msdownload; charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            <!--Springmvc前端JSON转换器MappingJackson2HttpMessageConverter设置对值为null的处理-->
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <!-- 拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.platform.interceptor.SessionInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--Spring支持上传图片-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>


    <!--hibernate-->
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:datasource.properties"/>

    <bean id="platformSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${db.driverClassName}"></property>
        <property name="jdbcUrl" value="${db.url}"></property>
        <property name="user" value="${db.username}"></property>
        <property name="password" value="${db.password}"></property>
        <!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
        <property name="autoCommitOnClose" value="${autoCommitOnClose}"/>
        <!-- 连接池中保留的最小连接数 -->
        <property name="minPoolSize" value="${minPoolSize}"/>
        <!-- 连接池中保留的最大连接数。默认为15 -->
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。默认为3 -->
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0秒 -->
        <property name="maxIdleTime" value="${maxIdleTime}"/>
        <!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目。默认为3 -->
        <property name="acquireIncrement" value="${acquireIncrement}"/>
        <!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"/>
        <!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0 -->
        <property name="checkoutTimeout" value="${checkoutTimeout}"/>
    </bean>

    <!-- 多数据源配置开始 <bean id="updateSource" parent="platformSource"> <property
        name="jdbcUrl" value="${db1.url}"></property> <property name="user" value="${db1.username}"></property>
        <property name="password" value="${db1.password}"></property> </bean> -->
    <bean id="dynamicDataSource" class="com.platform.common.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="platfrom" value-ref="platformSource"/>
                <!-- <entry key="update" value-ref="updateSource"/> -->
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="platformSource"/>
    </bean>
    <!-- 多数据配置结束 -->

    <!-- 设置sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dynamicDataSource"/>
        </property>
        <property name="mappingResources">
            <list>
                <value>sql.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}
                </prop><!-- validate,update,create,create-drop -->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>

                <!-- 二级缓存 -->
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>

                <!-- ehcache在2.5以后，CacheManager使用了Singleton，这样在创建多个CacheManager时就会产生错误，需加上下面配置 -->
                <prop key="hibernate.cache.region.factory_class">
                    ${hibernate.cache.region.factory_class}
                </prop>

                <prop key="hibernate.query.factory_class">
                    org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory
                </prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate4.SpringSessionContext
                </prop>

            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.*</value>
            </list>
        </property>

    </bean>

    <bean id="openSessionInViewInterceptor"
          class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置Hibernate事务管理器 -->
    <bean id="txManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 将所有具有@Transactional注解的Bean自动配置为声明式事务支持 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--hibernate-->

    <!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">-->
        <!--<property name="cacheManager" ref="ehcache"></property>-->
    <!--</bean>-->

    <!--<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
        <!--<property name="configLocation" value="classpath:ehcache.xml"></property>-->
    <!--</bean>-->

</beans>